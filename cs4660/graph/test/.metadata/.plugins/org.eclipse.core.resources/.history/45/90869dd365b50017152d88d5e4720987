package Chat;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.Scanner;
public class chat 
{
	static ServerSocket serverSock = null;
	static Socket clientSock = null;
	static ArrayList<ClientModel> clients = new ArrayList<ClientModel>();
	static Integer port = 0;
	static String connectIP;
	static Integer connectPort;
	static Scanner scanner = new Scanner(System.in);
	public static void main(String[] args) {
		//if port isn't specified as a parameter, have user enter one
		if (args.length == 0) {
			while (port == 0) {
				System.out.println("Oops! Looks like you don't have a port number specified! Please type one in now.");
				port = Integer.parseInt(scanner.nextLine());
			}
		} else
			port = Integer.parseInt(args[0]);
		Boolean validConnection = false;
		//checks if port is available
		try {
			validConnection = serverAvailable(port);
		} catch (Exception e) {
			System.out.println("Testing connection failed!");
		}
		//if not available, have user enter a new one
		while (!validConnection) {
			System.out.println("Enter a valid port please.");
			port = Integer.parseInt(scanner.nextLine());
			try {
				validConnection = serverAvailable(port);
			} catch (Exception e) {
				System.out.println("Testing connection failed!");
			}
		}
		System.out.println("Welcome to the chat app!");
		//starts server using specified port
		Server server = new Server();
		Thread serverStart = new Thread(server);
		serverStart.start();
		boolean isRunning = true;
		while (isRunning) {
			System.out.println("Enter a command. Type in \"help\" for the commands to this program.");
			String input = scanner.nextLine();
			String[] command = input.split(" ");
			if (command[0].toLowerCase().equals("help")) {
				System.out.println("myip \nDisplays the IP address of this process.\n");
				System.out.println(
						"myport \nDisplays the port that this process is listening for incoming connections.\n");
				System.out.println(
						"connect <destination IP> <port no.> \nConnect to the specified IP address and port number.\n");
				System.out.println("list \nDisplays a numbered list of all the connections this process is part of.\n");
				System.out.println(
						"terminate <connection id> \nTerminate the connection in the given ID. Use the command \"list\" to obtain the IDs of connections.\n");
				System.out.println(
						"send <connection id> <message> \nSends a message to the given ID. Use the command \"list\" to obtain the IDs of connections.\n");
				System.out.println("exit \nClose all connections and exit the program.\n");
			}
			if (command[0].toLowerCase().equals("myip")) {
				try {
					System.out.println("IP: " + InetAddress.getLocalHost().getHostAddress());
				} catch (Exception e) {
					System.out.println(e);
				}
			}
			if (command[0].toLowerCase().equals("myport"))
				System.out.println("Listening port: " + port);
			if (command[0].toLowerCase().equals("connect")) {

				if (command.length == 3) {
					connectIP = command[1];
					connectPort = Integer.parseInt(command[2]);
					try {
						//checks if user is trying to connect to their own IP
						if (connectIP.equals(InetAddress.getLocalHost().getHostAddress())) {
							System.out.println("Connecting to your own IP is not allowed.");
						} else {
							//connects if user is not doing so
							Client client = new Client();
							Thread clientStart = new Thread(client);
							clientStart.start();
						}
					} catch (Exception e) {
						System.out.println("Error connecting to specified IP and port.");
					}
				}
			}
			if (command[0].toLowerCase().equals("list")) {
				System.out.println("id:	IP Address	Port No.");
				for (int x = 0; x < clients.size(); x++) {
					System.out.println(x + ":	" + clients.get(x).getIp() + "	" + clients.get(x).getPort());
				}
			}
			if (command[0].toLowerCase().equals("terminate")) {
				if (command.length != 1) {
					for (int x = 0; x < clients.size(); x++) {
						if (x == Integer.parseInt(command[1])) {
							//when the server receives "bye", the server removes the client from its list of clients
							clients.get(x).getWriter().println("bye");
							clients.get(x).getWriter().flush();
							System.out.println("\"bye\" sent to: " + clients.get(x).getIp() + ":"
									+ clients.get(x).getPort());
							//the client then closes the connection and removes the server from its list of clients
							for (int y = 0; y < clients.size(); y++) {
								if (clients.get(y).getIp().equals(clients.get(x).getIp())
										&& clients.get(y).getPort() == clients.get(x).getPort()) {
									clients.get(y).getWriter().close();
									clients.remove(y);
									break;
								}
							}
							break;
						}
					}
				} else
					System.out.println("You didn't enter an ID!");
			}
			if (command[0].toLowerCase().equals("send")) {
				if (command.length >= 3) {
					StringBuilder sb = new StringBuilder();
					for (int y = 2; y < command.length; y++) {
						sb.append(command[y] + " ");
					}
					if (Integer.parseInt(command[1]) >= 0 && Integer.parseInt(command[1]) < clients.size()) {
						clients.get(Integer.parseInt(command[1])).getWriter().println(sb);
						clients.get(Integer.parseInt(command[1])).getWriter().flush();
						System.out.println("Message sent to: " + clients.get(Integer.parseInt(command[1])).getIp() + ":"
								+ clients.get(Integer.parseInt(command[1])).getPort());
					} else {
						System.out.println("Are you sure you typed in the right ID?");
					}
				}
			}
			if (command[0].toLowerCase().equals("exit")) {
				//closes all the connections that the server is connected to and the client is connected to
				while (!clients.isEmpty()) {
					clients.get(0).getWriter().println("bye");
					clients.get(0).getWriter().flush();
					System.out.println("\"bye\" sent to: " + clients.get(0).getIp() + ":"
							+ clients.get(0).getPort());
					clients.remove(0);
				}
				try {
					Thread.sleep(1000);
				} catch (InterruptedException e) {
					Thread.currentThread().interrupt();
				}
				System.out.println("Program shutting down...");
				isRunning = false;
			}
		}
		System.exit(0);
	}
}
